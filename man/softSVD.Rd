% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/softSVD.R
\name{softSVD}
\alias{softSVD}
\title{penalized SVD}
\usage{
softSVD(x, nf = 1, kv = Inf, ku = Inf, wv = 1, wu = 1, pos = FALSE,
  maxiter = 50, tol = sqrt(.Machine$double.eps), verbose = FALSE)
}
\arguments{
\item{x}{the matrix to be decomposed}

\item{nf}{the number of components want to computed}

\item{kv}{the number of nonzero coefficients for the right regularized sigular vectors}

\item{ku}{the number of nonzero coefficients for the left regularized sigular vectors}

\item{wv}{the weight for columns of x}

\item{wu}{the weight for rows of of x}

\item{pos}{Logical value, if only retain non-negative values in the}

\item{maxiter}{the maximum number of iteration}

\item{tol}{the tolerance of error}

\item{verbose}{print progress of calulation}
}
\value{
the same as svd, list of three components, d, u, v
}
\description{
SVD with sparsity, non-negative and weight constrants
}
\details{
The algorithm use a generalized version of NIPALS algorithm to allow 
sparsity, force non-negative values on both left and rigth singular vectors. 
In addition, different weghted could be introduced, the columns/rows 
with bigger weights are more likely to be selected.
}
\examples{
library(corpcor)

#' a random matrix
x <- matrix(rnorm(50), 5, 10)
ss <- svd(x)
ss2 <- softSVD(x, nf = 5)
ss$d
ss2$d
all.equal(abs(ss$u), abs(ss2$u))
all.equal(abs(ss$v), abs(ss2$v))

#' NCI60 data
data("NCI60_4arrays")
#
d <- as.matrix(NCI60_4arrays$agilent)

###' compare with svd
ss <- svd(d, nu = 5, nv = 5)
ss2 <- softSVD(d, nf = 5)
ss$d
ss2$d
all.equal(abs(ss$u), abs(ss2$u))
all.equal(abs(ss$v), abs(ss2$v))

#' normalize the data
dt <- scale(t(d), scale = FALSE)
pp <- softSVD(x = dt, nf = 5, kv = 30, ku = 6, maxiter = 100)
barplot(pp$u[, 1], col = as.factor(substr(colnames(d), 1, 2)))
barplot(pp$v[, 1])

#' change sparsity
dt <- scale(t(d), scale = FALSE)
pp <- softSVD(x = dt, nf = 5, kv = 30, ku = 9, maxiter = 1000, pos = TRUE)
i <- 2
barplot(pp$u[, i], col = as.factor(substr(colnames(d), 1, 2)), las=2, names.arg = rownames(dt))
barplot(pp$v[, i])

#' change sparsity
pp <- softSVD(x = dt, nf = 5, kv = Inf, ku = 9, maxiter = 1000, pos = TRUE)
i <- 1
barplot(pp$u[, i], col = as.factor(substr(colnames(d), 1, 2)), las=2, names.arg = rownames(dt))
barplot(pp$v[, i])

#' change sparsity
pp <- softSVD(x = dt, nf = 5, kv = 30, ku = Inf, maxiter = 1000, pos = FALSE)
i <- 1
barplot(pp$u[, i], col = as.factor(substr(colnames(d), 1, 2)), las=2, names.arg = rownames(dt))
barplot(pp$v[, i])

#' use weight
w <- rowSums(d - min(d))
w <- w + max(w) #' prefer to select high intensity genes

pw <- softSVD(x = dt, nf = 6, kv = 30, ku = Inf, wv = w, maxiter = 1000, pos = FALSE, verbose = TRUE)
i <- 6
barplot(pw$u[, i], col = as.factor(substr(colnames(d), 1, 2)), las=2, names.arg = rownames(dt))
barplot(pw$v[, i])


i1 <- apply(pp$v, 1, function(x) any(x!=0))
i2 <- apply(pw$v, 1, function(x) any(x!=0))
plot(pw$u[, 1], pp$u[, 1])
layout(matrix(1:2, 1, 2))
hist(d[i1 & !i2, ], main = "No weight")
hist(d[i2 & !i1, ], main = "Weight")
}
\seealso{
\code{\link{svd}}
}
\author{
Chen Meng
}
\keyword{internal}
\keyword{non-negative}
\keyword{penalized}
\keyword{svd}
\keyword{svd,}
